#include <stdio.h>
#include <math.h>
#define N 50
int Max(int a, int b)
{
    if (a > b)
        return a;
    return b;
}
int maxProfit(int value[], int weight[], int W, int size)
{
    int ans[size + 1][W + 1];
    for (int i = 0; i < size + 1; i++)
    {
        for (int j = 0; j < W + 1; j++)
        {
            if (i == 0 || j == 0)
                ans[i][j] = 0;
        }
    }
    for (int i = 1; i < size + 1; i++)
    {
        for (int j = 1; j < W + 1; j++)
        {
            if (weight[i - 1] <= j)
                ans[i][j] = Max(value[i - 1] + ans[i - 1][j - weight[i - 1]], ans[i - 1][j]);
            else
                ans[i][j] = ans[i - 1][j];
        }
    }
    return ans[size][W];
}
int main()
{
    // int value[] = {1, 4, 5, 7};
    printf("start");
    int size;

    int W;
    printf("\nsize of Array\n");
    scanf("%d", &size);
    int value[size], weight[size];
    printf("\nenter value for weight\n");
    for (int i = 0; i < size; i++)
        scanf("%d", &value[i]);
    printf("\nenter weights\n");
    for (int i = 0; i < size; i++)
        scanf("%d", &weight[i]);
    printf("\nenter the weight of knapsack\n");
    scanf("%d", &W);
    // int weight[] = {1, 3, 4, 5};
    // int W = 7;
    // int size = sizeof(value) / sizeof(value[0]);
    int maxprofit = maxProfit(value, weight, W, size);
    printf("\nMaximum Profit is -----> %d ", maxprofit);
}
